<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.demo.mapper.BrandMapper">

    <resultMap id="brandMap" type="com.demo.pojo.Brand">
        <result column="brand_name" property="brand"/>
        <result column="company_name" property="companyName"/>
    </resultMap>


    <select id="selectAll" resultMap="brandMap">
        select *
        from tb_user
    </select>

    <select id="selectById" resultMap="brandMap">
        select *
        from tb_user
        where id = #{id}
    </select>

    <select id="selectByCondition" resultMap="brandMap">
        select *
        from tb_user
        -- where 1 = 1
        -- 此处加入恒等式防止首个条件不成立后导致 where and 相邻的情况,或使用 where 标签
        <where>
            <if test="status != null">
                status = #{status}
            </if>
            <if test="companyName != null and companyName!=''">
                and company_name like #{companyName}
            </if>

            <if test="brand != null and brand!=''">
                and brand_name like #{brand}
            </if>
        </where>
    </select>

    <insert id="add">
        insert into tb_user (id, brand_name, company_name, ordered, description, status)
        values (#{id}, #{brand}, #{companyName}, #{ordered}, #{description}, #{status})
    </insert>

    <update id="update">
        update tb_user
        set brand_name=#{brand},
            company_name=#{companyName},
            ordered=#{ordered},
            description=#{description},
            status=#{status}
        where id = #{id}
    </update>

    <delete id="del">
        delete
        from tb_user
        where id = #{id}
    </delete>

    <delete id="delByIds">
        delete from tb_user where id in
        <foreach collection="array" index="id" separator="," open="(" close=")">
            #{id}
        </foreach>
    </delete>


</mapper>

        <!--
            数据库表的字段名称 和 实体类的属性名称不一样，则不能自动封装数据，解决方法：
            * 起别名： 查询时使用 as 起别名 brand_name as brandName,也可使用sql片段标签封装别名，使其可以复用
            * resultMap: 使用resultMap映射  定义resultMap标签，使用resultMap替换resultType属性  常用！！！
                - 外标签   id： 唯一标识  type： 映射类型，支持别名
                - 内标签   id： 完成主键的映射  result： 完成非主键的映射
        -->